// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  role          Role      @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]
  reviews       Review[]
  addresses     Address[]
  wishlistItems Product[] @relation("UserWishlist")
  cart          Cart?
}

model Product {
  id             String         @id @default(cuid())
  name           String
  description    String
  price          Float
  compareAtPrice Float?
  sku            String         @unique
  barcode        String?
  inventory      Int            @default(0)
  weight         Float?
  length         Float?
  width          Float?
  height         Float?
  isDigital      Boolean        @default(false)
  digitalFileUrl String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  category       Category       @relation(fields: [categoryId], references: [id])
  categoryId     String
  images         ProductImage[]
  orderItems     OrderItem[]
  reviews        Review[]
  wishedByUsers  User[]         @relation("UserWishlist")
  cartItems      CartItem[]
}

model Category {
  id               String     @id @default(cuid())
  name             String
  description      String?
  parentCategory   Category?  @relation("SubCategories", fields: [parentCategoryId], references: [id])
  parentCategoryId String?
  subCategories    Category[] @relation("SubCategories")
  products         Product[]
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  altText   String?
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Order {
  id                String        @id @default(cuid())
  user              User          @relation(fields: [userId], references: [id])
  userId            String
  status            OrderStatus
  total             Float
  subTotal          Float
  tax               Float
  shippingCost      Float
  shippingAddress   Address       @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String
  paymentMethod     PaymentMethod
  paymentStatus     PaymentStatus
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  orderItems        OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
}

model Address {
  id         String      @id @default(cuid())
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  type       AddressType
  firstName  String
  lastName   String
  company    String?
  address1   String
  address2   String?
  city       String
  state      String
  postalCode String
  country    String
  phone      String?
  isDefault  Boolean     @default(false)
  orders     Order[]
}

model Review {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(cuid())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
}

model Settings {
  id    String      @id @default(cuid())
  key   String      @unique
  value String
  type  SettingType
}

enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum AddressType {
  BILLING
  SHIPPING
}

enum SettingType {
  GENERAL
  PAYMENT
  SHIPPING
  EMAIL
  SOCIAL
}
